# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml hoho

trigger:
- main

pool: Azure Pipelines

stages: 
- stage : BuildPushDockerImage
  jobs : 
  - job : BuildPushDockerImage
    steps:
      - task: Docker@2
        inputs:
          containerRegistry: 'DockerHub'
          repository: 'abdelrhmanhamdy/react'
          command: 'buildAndPush'
          Dockerfile: 'app/Dockerfile'


- stage: BuildApp
  jobs: 
  - job : BuildTheApplication
    steps:
      -  task: NodeTool@0
         inputs:
            versionSpec: '12.x'
      - task: Npm@1
        inputs:
          command: 'install'
          workingDir: 'app'
      - task: Npm@1
        inputs:
          command: 'custom'
          workingDir: 'app'
          customCommand: 'run build'

- stage: TestTheApplication
  jobs: 
  - job : RunUnitTests
    steps: 
      -  task: NodeTool@0
         inputs:
            versionSpec: '12.x'
      - task: Npm@1
        inputs:
          command: 'install'
          workingDir: 'app'
      - task: Npm@1
        inputs:
          command: 'custom'
          workingDir: 'app'
          customCommand: 'run test'


 
- stage : StaticCodeAnalysis
  jobs : 
  - job : RunSonarqube
    steps:
   
    - task: SonarQubePrepare@5
      inputs:
        SonarQube: 'sonarqube'
        scannerMode: 'CLI'
        configMode: 'manual'
        cliProjectKey: 'react'
        cliProjectName: 'react'
        cliSources: '.'

    - script: |
        FILTERED_PARAMS=$(echo $SONARQUBE_SCANNER_PARAMS | sed 's/"sonar.branch.name":"[^"]*"\,//g')
        echo "##vso[task.setvariable variable=SONARQUBE_SCANNER_PARAMS]$FILTERED_PARAMS"
      displayName: Filter out non-CE sonar parameters
    - task: SonarQubeAnalyze@5
      inputs:
        jdkversion: 'JAVA_HOME_11_X64'
  
    - task: SonarQubePublish@5
      inputs:
         pollingTimeoutSec: '300'



      
#- stage : UploadArtifact 
#  jobs : 
#  - job : UploadArtifact
#    steps:
#      - task: ArchiveFiles@2
#        inputs:
#          rootFolderOrFile: 'app'
#          includeRootFolder: false
#          archiveType: 'zip'
#          archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
#          replaceExistingArchive: true 


     # - script : |
      #  curl -u $(JFROGUSER):$(JFROGPASS) -T $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip "http://34.207.61.89:8081/artifactory/docker-local-ADO/app"

#      - task: cURLUploader@2
#        inputs:
#          files: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
#          authType: 'UserAndPass'
#          username: '$(JfrogUser)'
#          password: '$(JfrogPass)'
#          url: 'http://34.207.61.89:8081/artifactory/docker-local-ADO/app:$(Build.BuildId).zip'
#          remotePath: 